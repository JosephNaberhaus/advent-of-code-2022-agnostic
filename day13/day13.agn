module DayThirteen

max(first: int, second: int): int {
    if (first > second) {
        return first;
    }

    return second;
}

parseInt(value: string): int {
    var cur = 0;
    for (var i = 0; i < value.length; i += 1) {
        if (value[i] < '0' || value[i] > '9') {
            return 0;
        }

        cur *= 10;
        cur += int(value[i] - '0');
    }

    return cur;
}

model Packet {
    value: int;
    children: list<Packet>;

    compare(other: Packet): int {
        if (value != null && other.value != null) {
            if (value == other.value) {
                return 0;
            } else if (value < other.value) {
                return -1;
            } else {
                return 1;
            }
        } else if (value != null) {
            return Packet{children: [self]}.compare(other);
        } else if (other.value != null) {
            return compare(Packet{children: [other]});
        }

        for (var i = 0; i < max(children.length, other.children.length); i++) {
            if (i >= children.length) {
                return -1;
            } else if (i >= other.children.length) {
                return 1;
            }

            var cmp = children[i].compare(other.children[i]);
            if (cmp == -1) {
                return -1;
            } else if (cmp == 1) {
                return 1;
            }
        }

        return 0;
    }

    @==(other) {
        if (value != null) {
            return value == other.value;
        }

        if (children.length != other.children.length) {
            return false;
        }

        for (var i = 0; i < children.length; i++) {
            if (children[i] != other.children[i]) {
                return false;
            }
        }

        return true;
    }
}

sortPackets(packets: list<Packet>): void {
    for (var i = 0; i < packets.length; i++) {
        var minIndex = i;
        for (var j = i + 1; j < packets.length; j++) {
            if (packets[j].compare(packets[minIndex]) < 0) {
                minIndex = j;
            }
        }

        var temp = packets[i];
        packets[i] = packets[minIndex];
        packets[minIndex] = temp;
    }
}

parsePacket(str: string): Packet {
    var stack = [Packet{children: make(list<Packet>)}];

    var curValue = "";
    for (var i = 1; i < str.length - 1; i++) {
        if (str[i] == '[') {
            var newPacket = Packet{children: make(list<Packet>)};
            stack[stack.length - 1].children.push(newPacket);
            stack.push(newPacket);
        } else if (str[i] == ']') {
            if (curValue != "") {
                stack[stack.length - 1].children.push(Packet{value: parseInt(curValue)});
                curValue = "";
            }

            stack.pop();
        } else if (str[i] == ',') {
            stack[stack.length - 1].children.push(Packet{value: parseInt(curValue)});
            curValue = "";
        } else {
            curValue += string(str[i]);
        }
    }
    if (curValue != "") {
        stack[stack.length - 1].children.push(Packet{value: parseInt(curValue)});
    }

    return stack[0];
}

partOne(lines: list<string>): int {
    var sum = 0;
    for (var i = 0; i < lines.length; i += 3) {
        var first = parsePacket(lines[i]);
        var second = parsePacket(lines[i + 1]);

        if (first.compare(second) == -1) {
            sum += (i / 3) + 1;
        }
    }

    return sum;
}

partTwo(lines: list<string>): int {
    var packets = make(list<Packet>);
    for (var line in lines) {
        if (line == "") {
            continue;
        }

        packets.push(parsePacket(line));
    }

    var firstDividerPacket = Packet{children: [Packet{children: [Packet{value: 2}]}]};
    var secondDividerPacket = Packet{children: [Packet{children: [Packet{value: 6}]}]};

    packets.push(firstDividerPacket);
    packets.push(secondDividerPacket);
    sortPackets(packets);

    var first int;
    var second int;

    for (var i = 0; i < packets.length; i++) {
        var packet = packets[i];
        if (packet == firstDividerPacket) {
            first = i + 1;
        }
        if (packet == secondDividerPacket) {
            second = i + 1;
        }
    }

    return first * second;
}
